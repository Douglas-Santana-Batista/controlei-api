import express, {Express,Request ,Response} from "express"
import { Prisma, PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';

dotenv.config();

const prisma = new PrismaClient();
const app: Express = express();
const port = process.env.PORT|| 3000;

app.use(express.json());


// Rota de teste de conexão
app.get('/test-db', async (req: Request, res: Response) => {
  try {
    const result = await prisma.$queryRaw<{ sum: number }[]>`SELECT 1+1 AS sum`;

    const convertedResult = result.map((item: any) => ({
      sum: Number(item.sum)
    }));

    res.json({ 
      success: true,
      database: "Conectado com sucesso!",
      result: convertedResult
    });
  } catch (error: any) {
    console.error("Erro de conexão:", error);
    res.status(500).json({
      success: false,
      error: "Falha na conexão com o banco de dados",
      details: error.message
    });
  }
});

//Create User
  app.post("/user", async (req: any, res: any) => {
    const { cpf, nome, senha, email } = req.body;
    
    if (!nome || !email || !senha || !cpf) {
      return res.status(400).json({ error: "Todos os campos devem ser preenchidos" });
    }

    try {
      const existingUser = await prisma.usuarios.findFirst({
        where: {OR: [{ email },{ cpf }]}
      })

      if(existingUser){
        return res.status(409).json({
          error: existingUser.email === email
          ? "E-mail já cadastrado"
          : "cpf já cadastrado"
        })
      }
      const novoUsuario = await prisma.usuarios.create({
        data: {nome, email, senha, cpf}
      });

      const { senha: _, ...usuarioSemSenha } = novoUsuario;

      res.status(201).json(usuarioSemSenha);
    } catch (error) {
      if (error instanceof Prisma.PrismaClientKnownRequestError){
        if(error.code === 'P2002'){
          return res.status(409).json({
            error: 'Já existe um usuário com este email ou cpf'
          });
        }
      }
    }
  })

  

app.delete("/user/:id", async (req:any, res:any) => {
  try {
    // 1. Converter e validar ID
    const userId = Number(req.params.id);
    if (isNaN(userId)) {
      return res.status(400).json({ error: "ID inválido" });
    }

    // 2. Operação de delete
    await prisma.usuarios.delete({
      where: { id_usuario: userId }
    });

    res.status(204).send();

  } catch (error) {
    // 4. Tratar erros específicos
    if (error instanceof Prisma.PrismaClientKnownRequestError) {
      if (error.code === 'P2025') {
        return res.status(404).json({ error: "Usuário não encontrado" });
      }
    }
    res.status(500).json({ error: "Erro interno" });
  }
})


app.listen(port, () => {
  console.log(`app listening on port ${port}`)
})