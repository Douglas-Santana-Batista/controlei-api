services:
  app:
    command: ["./wait-for-db.sh", "db", "5432", "npm", "start"]
    build: .
    environment:
      # Variáveis que serão passadas para o container
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - PORT=${PORT}
      - NODE_ENV=${NODE_ENV}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${PORT}:${PORT}" # Usa a variável PORT do .env
      - "5555:5555"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:13
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_URL: ${DATABASE_URL}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d controlei_api"]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
