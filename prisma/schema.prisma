// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

model Transaction {
  id          Int      @id @default(autoincrement())
  description String
  amount      Decimal
  type        String
  createdAt   DateTime @default(now())
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum paymentType {
  CREDITO
  DEBITO
  BOLETO
  PIX
}

model User {
  id_user       Int             @id @default(autoincrement()) @map("id_user")
  cpf           String?         @unique
  name          String?
  password      String?
  email         String?         @unique
  categories    Categories[]
  expenses      Expenses[]
  revenues      Revenues[]
  installments  Installments[]
  Subcategories Subcategories[]

  @@map("user")
}

model Categories {
  id_category          Int             @id @default(autoincrement())
  category_description String
  id_user              Int
  user                 User            @relation(fields: [id_user], references: [id_user], onDelete: Cascade)
  expenses             Expenses[]
  revenues             Revenues[]
  Subcategories        Subcategories[]

  @@map("categories")
}

model Subcategories {
  id_subcategories        Int        @id @default(autoincrement())
  subcategory_description String
  id_category             Int
  id_user                 Int
  categories              Categories @relation(fields: [id_category], references: [id_category], onDelete: Cascade)
  user                    User       @relation(fields: [id_user], references: [id_user], onDelete: Cascade)
  expenses                Expenses[]
  revenues                Revenues[]

  @@map("subcategories")
}

model Expenses {
  id_expense          Int            @id @default(autoincrement())
  expense_date        DateTime       @default(dbgenerated("CURRENT_DATE"))
  expense_description String
  value               Float
  Installments        Int?
  payment_type        paymentType    @default(DEBITO)
  id_user             Int
  id_category         Int
  user                User           @relation(fields: [id_user], references: [id_user], onDelete: Cascade)
  categories          Categories     @relation(fields: [id_category], references: [id_category], onDelete: Cascade)
  installments        Installments[]
  Subcategories       Subcategories? @relation(fields: [id_subcategories], references: [id_subcategories])
  id_subcategories    Int?

  @@map("expenses")
}

model Revenues {
  id_revenues         Int            @id @default(autoincrement())
  revenue_date        DateTime       @default(dbgenerated("CURRENT_DATE"))
  revenue_description String?
  value               Float
  id_user             Int
  id_category         Int
  user                User           @relation(fields: [id_user], references: [id_user], onDelete: Cascade)
  categories          Categories     @relation(fields: [id_category], references: [id_category], onDelete: Cascade)
  installments        Installments[]
  Subcategories       Subcategories? @relation(fields: [id_subcategories], references: [id_subcategories])
  id_subcategories    Int?

  @@map("revenues")
}

model Installments {
  id_installments     Int       @id @default(autoincrement())
  installments_date   DateTime  @default(dbgenerated("CURRENT_DATE"))
  installments_number Int
  id_user             Int
  id_revenues         Int?
  id_expenses         Int?
  user                User      @relation(fields: [id_user], references: [id_user], onDelete: Cascade)
  revenues            Revenues? @relation(fields: [id_revenues], references: [id_revenues])
  expense             Expenses? @relation(fields: [id_expenses], references: [id_expense])

  @@map("installments")
}
